name: CI/CD Frontend

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]

env:
  IMAGE: kteyssere/greenquest-frontend

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install deps
        run: npm ci

      - name: Build (production config par défaut)
        run: npm run build -- --configuration=production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: front-dist
          path: dist/

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install deps
        run: npm ci

      # --- TESTS + COUVERTURE (lcov) ---
      - name: Unit tests (ChromeHeadless + coverage)
        run: |
          # Active la couverture; Angular écrit coverage/<appName>/lcov.info
          npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage
          # Normalise le chemin: copie le premier lcov trouvé vers coverage/lcov.info
          mkdir -p coverage
          LCOV_PATH="$(find coverage -name lcov.info -print -quit)"

          if [ -n "$LCOV_PATH" ]; then
            if [ "$LCOV_PATH" != "coverage/lcov.info" ]; then
              cp "$LCOV_PATH" coverage/lcov.info
            fi
          else
            echo "lcov.info introuvable" && exit 1
          fi

      # --- SONARQUBE SCAN ---
      - name: SonarQube Scan for dev
        if: github.ref == 'refs/heads/develop'
        uses: SonarSource/sonarqube-scan-action@v5
        with:
          args: >
            -Dsonar.projectKey=front-dev
            -Dsonar.projectName=front-dev
            -Dsonar.sources=src
            -Dsonar.tests=src
            -Dsonar.test.inclusions=**/*.spec.ts
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.projectBaseDir=.
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_DEV }}

      - name: SonarQube Scan for main
        if: github.ref == 'refs/heads/main'
        uses: SonarSource/sonarqube-scan-action@v5
        with:
          args: >
            -Dsonar.projectKey=front
            -Dsonar.projectName=front
            -Dsonar.sources=src
            -Dsonar.tests=src
            -Dsonar.test.inclusions=**/*.spec.ts
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.projectBaseDir=.
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Déploiement STAGING sur develop
  deploy_staging:
    runs-on: ubuntu-latest
    needs: [ build, test ]
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push image (:staging)
        run: |
          docker build --pull -t $IMAGE:staging --build-arg CONFIG=staging .
          docker push $IMAGE:staging

      - name: Deploy to VPS (staging)
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          script: |
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            cd /var/www
            docker compose up -d --no-deps --pull always --force-recreate frontend-staging

  # Déploiement PROD sur tag vX.Y.Z
  deploy_prod:
    runs-on: ubuntu-latest
    needs: [ build, test ]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push images (:v* + :latest)
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          docker build --pull -t $IMAGE:$VERSION -t $IMAGE:latest .
          docker push $IMAGE:$VERSION
          docker push $IMAGE:latest

      - name: Deploy to VPS (prod)
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          script: |
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            cd /var/www
            docker compose up -d --no-deps --pull always --force-recreate frontend
