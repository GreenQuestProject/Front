name: CI/CD Frontend

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  IMAGE_NAME: greenquest-frontend

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Installer les dépendances
        run: npm ci

      - name: Build Angular en production
        run: npm run build -- --configuration=production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: front
          path: dist/

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Installer les dépendances
        run: npm ci

      - name: Lancer les tests unitaires
        run: npm run test -- --watch=false --browsers=ChromeHeadless

  deploy:
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Télécharger les fichiers construits
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Connexion a Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Construire l'image Docker
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:latest .

      - name: Pousser l'image Docker
        run: docker push ${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:latest

      - name: Déployer sur le VPS via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:latest
            docker stop $IMAGE_NAME || true
            docker rm $IMAGE_NAME || true
            docker run -d --name $IMAGE_NAME -p 80:80 ${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:latest
